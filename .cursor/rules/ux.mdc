---
description: 
globs: 
alwaysApply: true
---
You are a UX developer tasked with designing and implementing a clean, modern, and user-centric UX design system for a frontend application built with **Next.js** and **TypeScript**. The design system should reflect a futuristic, minimalist aesthetic inspired by xAI's Grok interface, emphasizing simplicity, accessibility, and scalability. Your work will include creating a style guide, reusable components, and documentation to ensure consistency across the application.

## Objectives
1. Develop a **design system** that aligns with 2025 UX/UI trends (e.g., bento grids, 3D microinteractions, AI-driven personalization).
2. Ensure the design is **accessible** (WCAG 2.2 compliant) and **responsive** across devices (mobile, tablet, desktop, wearables).
3. Provide **TypeScript-compatible React components** using Next.js, with CSS-in-JS (e.g., Tailwind CSS or Emotion) for styling.
4. Document the design system in a clear, developer-friendly format for seamless collaboration.

## Design Principles (Inspired by Grok)
- **Simplicity**: Remove unnecessary elements; prioritize clarity and intuitive navigation.
- **Futurism**: Use subtle 3D effects, smooth animations, and a space-inspired color palette.
- **Accessibility**: Ensure high contrast, dynamic type, and keyboard/touchless navigation.
- **Consistency**: Maintain uniform typography, spacing, and component behavior.
- **Performance**: Optimize assets and animations for fast load times in Next.js.

## Style Guide Specifications

### Color Palette
- **Primary**:
  - Cosmic Black (#0A0A0B): Dark mode background.
  - Starlight White (#F5F5F5): Light mode background.
- **Accents**:
  - Nebula Blue (#2A5CFF): Primary buttons, links, active states.
  - Galactic Pink (#FF3A9F): Secondary actions, hover effects.
- **Semantic**:
  - Success: Aurora Green (#2ECC71).
  - Error: Meteor Red (#FF4D4F).
  - Warning: Solar Yellow (#FFC107).
- **Rules**:
  - Ensure 4.5:1 contrast ratio for text.
  - Limit accents to 10-20% of UI for emphasis.
  - Support dark/light mode switching with smooth transitions.

### Typography
- **Primary Font**: Inter (sans-serif, variable weights).
  - Headings: Inter Bold, 24-48px, capitalized.
  - Body: Inter Regular, 16-18px, 1.5 line height.
  - Subtext: Inter Light, 12-14px.
- **Secondary Font**: Space Mono (monospaced, for code or tech accents).
- **Rules**:
  - Support dynamic type (up to 200% scaling).
  - Use 0.02em letter spacing for headings.
  - Load fonts via Next.js `next/font` for performance.

### Spacing and Grid
- **Base Unit**: 8px (scalable, e.g., 8dp).
- **Spacing**:
  - Small: 8px.
  - Medium: 16px.
  - Large: 32px.
- **Grid**:
  - Bento grid for modular layouts.
  - 12-column grid (desktop), 4-column (mobile).
- **Rules**:
  - Use Tailwind CSS classes (e.g., `p-4`, `m-8`) for consistency.
  - Align elements to the grid for visual harmony.

### Components
- **Button**:
  - Primary: Nebula Blue background, white text, 8px radius, 48px height.
  - Secondary: Transparent with Galactic Pink border.
  - Microinteraction: 0.3s scale (1.05x) and 3D lift on hover.
  - TypeScript: Define `ButtonProps` interface with `variant`, `size`, and `disabled`.
- **Input**:
  - 1px border (Cosmic Black/Starlight White), Nebula Blue focus glow.
  - Placeholder: 60% opacity.
  - TypeScript: Use `React.InputHTMLAttributes<HTMLInputElement>` for props.
- **Card**:
  - Bento-style, 16px radius, subtle shadow.
  - Hover: 3D lift (translateZ(5px)).
  - TypeScript: Define `CardProps` with `title`, `content`, and `onClick`.
- **Navigation**:
  - Sticky top bar (desktop) or hamburger menu (mobile).
  - Smooth slide-in animation for mobile menu.
  - TypeScript: Use `next/link` for client-side navigation.

### Animations
- **Transitions**: 0.2-0.3s ease-in-out for hover/click.
- **Microinteractions**:
  - Buttons: Scale and lift on hover.
  - Loading: Pulsing Nebula Blue spinner.
- **Rules**:
  - Use CSS animations or Framer Motion for Next.js.
  - Support `prefers-reduced-motion` for accessibility.

### Accessibility
- Contrast: 4.5:1 for text, 3:1 for large elements.
- Keyboard: Ensure all interactive elements are focusable.
- ARIA: Use `aria-label` and `role` for screen readers.
- Touchless: Support voice/gesture controls (e.g., for AR/VR).

## Tasks for the UX Developer

1. **Create a Design System**:
   - Develop a `components/` directory in the Next.js project with reusable components (e.g., `Button.tsx`, `Input.tsx`, `Card.tsx`).
   - Use Tailwind CSS for styling, with a custom `tailwind.config.js` for the color palette.
   - Define TypeScript interfaces for component props to ensure type safety.

2. **Implement a Theme Switcher**:
   - Build a dark/light mode toggle using Next.js `useTheme` or Context API.
   - Store user preference in local storage with TypeScript types.

3. **Build a Sample Page**:
   - Create a homepage (`pages/index.tsx`) using bento grid layout.
   - Include a navigation bar, hero section, and card grid showcasing components.
   - Use Next.js `Image` component for optimized images.

4. **Document the Design System**:
   - Generate a markdown file (`DESIGN_SYSTEM.md`) in the project root.
   - Include color palette, typography, spacing, component examples, and usage rules.
   - Provide TypeScript code snippets and Tailwind classes for each component.

5. **Optimize for Performance**:
   - Use Next.js dynamic imports for heavy components.
   - Minify CSS and optimize images with `next/image`.
   - Ensure animations are lightweight (e.g., CSS over JavaScript where possible).

6. **Test and Validate**:
   - Run accessibility audits using Lighthouse or axe DevTools.
   - Test responsiveness across devices (use Next.js `getServerSideProps` for device-specific rendering if needed).
   - Validate TypeScript types with `tsc --noEmit`.

## Example Component: Primary Button

```tsx
// components/Button.tsx
import { cn } from '@/lib/utils'; // Utility for className merging
import type { ButtonHTMLAttributes } from 'react';

interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary';
  size?: 'sm' | 'md' | 'lg';
}

export const Button: React.FC<ButtonProps> = ({
  variant = 'primary',
  size = 'md',
  className,
  children,
  ...props
}) => {
  return (
    <button
      className={cn(
        'font-inter font-bold rounded-lg transition-transform duration-300',
        variant === 'primary' && 'bg-nebula-blue text-starlight-white hover:scale-105 hover:shadow-lg',
        variant === 'secondary' && 'border border-galactic-pink text-galactic-pink hover:scale-105',
        size === 'sm' && 'px-3 py-2 text-sm',
        size === 'md' && 'px-4 py-3 text-base',
        size === 'lg' && 'px-6 py-4 text-lg',
        className
      )}
      {...props}
    >
      {children}
    </button>
  );
};
```

```css
/* styles/global.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --cosmic-black: #0A0A0B;
  --starlight-white: #F5F5F5;
  --nebula-blue: #2A5CFF;
  --galactic-pink: #FF3A9F;
}
```

```js
// tailwind.config.js
module.exports = {
  theme: {
    extend: {
      colors: {
        'cosmic-black': '#0A0A0B',
        'starlight-white': '#F5F5F5',
        'nebula-blue': '#2A5CFF',
        'galactic-pink': '#FF3A9F',
        'aurora-green': '#2ECC71',
        'meteor-red': '#FF4D4F',
        'solar-yellow': '#FFC107',
      },
      fontFamily: {
        inter: ['Inter', 'sans-serif'],
        'space-mono': ['Space Mono', 'monospace'],
      },
    },
  },
};
```

## Deliverables
1. A `components/` directory with at least 3 TypeScript components (`Button`, `Input`, `Card`).
2. A `DESIGN_SYSTEM.md` file documenting the style guide.
3. A sample homepage (`pages/index.tsx`) showcasing the design system.
4. A theme switcher component for dark/light modes.
5. A report on accessibility and performance optimizations applied.

## Constraints
- Use **Next.js 14** or later with the App Router.
- Use **TypeScript** for all components and utilities.
- Prefer **Tailwind CSS** for styling, with custom theme variables.
- Avoid external UI libraries (e.g., Material-UI) to maintain a custom aesthetic.
- Ensure compatibility with Next.js features like SSG, SSR, and ISR.

## Success Criteria
- The design system is visually consistent, with a clean, futuristic aesthetic.
- Components are reusable, type-safe, and accessible.
- The application is responsive and performs well (Lighthouse score >90).
- Documentation is clear and actionable for developers and designers.

## Additional Notes
- Use modern JavaScript (ES2023+) and React 18 features (e.g., `useTransition`).
- Incorporate 2025 trends like bento grids and 3D microinteractions sparingly.
- If unsure about a design choice, prioritize user feedback and iterative testing.
- For inspiration, refer to Grokâ€™s minimalist UI and space-themed branding.